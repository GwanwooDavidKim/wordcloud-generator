# .github/workflows/wordcloud.yml

# 1. 워크플로우 이름 설정 (GitHub Actions 탭에 표시됨)
name: Generate Word Cloud

# 2. 워크플로우 실행 조건 설정
on:
  workflow_dispatch: # GitHub Actions 탭에서 수동으로 'Run workflow' 버튼을 눌렀을 때 실행

# 3. 워크플로우 작업(Job) 정의
jobs:
  # 작업 ID (임의로 지정 가능, 여기서는 build-and-deploy 사용)
  build-and-deploy:
    # 작업 실행 환경 지정 (최신 Ubuntu 리눅스 환경 사용)
    runs-on: ubuntu-latest

    # 작업 단계(Step) 정의 (순서대로 실행됨)
    steps:
      # 3-1. 레포지토리 코드 가져오기 (가장 먼저 실행되어야 함)
      - name: Checkout repository
        uses: actions/checkout@v4 # GitHub에서 제공하는 코드 체크아웃 액션 사용

      # 3-2. Java 설치 (Konlpy 라이브러리가 내부적으로 Java를 사용하므로 필요)
      - name: Set up Java
        uses: actions/setup-java@v4 # GitHub에서 제공하는 Java 설치 액션 사용
        with:
          distribution: 'temurin' # OpenJDK 배포판 중 하나 (Adoptium Temurin)
          java-version: '11'     # 사용할 Java 버전 (Konlpy 호환성 고려)

      # 3-3. Python 설치
      - name: Set up Python
        uses: actions/setup-python@v5 # GitHub에서 제공하는 Python 설치 액션 사용
        with:
          python-version: '3.9' # 사용할 Python 버전 (필요시 변경 가능, 3.8 이상 권장)

      # 3-4. Python 라이브러리 설치
      - name: Install dependencies
        run: | # 여러 줄의 명령어를 실행
          python -m pip install --upgrade pip # pip 자체를 최신 버전으로 업그레이드
          pip install -r requirements.txt   # requirements.txt 파일에 명시된 라이브러리들 설치

      # 3-5. 워드 클라우드 생성 Python 스크립트 실행
      - name: Generate word cloud
        # 이전 단계에서 준비한 Python 스크립트 파일을 실행
        run: python generate_wordcloud_from_keywords.py

      # 3-6. 생성된 이미지 파일을 레포지토리에 자동으로 커밋 및 푸시 (선택 사항)
      # 이 단계를 사용하면 워크플로우 실행 후 변경된 이미지가 자동으로 레포지토리에 반영됩니다.
      # 사용하려면 Actions 권한 설정이 필요할 수 있습니다 (이전 답변 참고).
      - name: Commit and push if changed
        uses: stefanzweifel/git-auto-commit-action@v5 # 자동 커밋/푸시 액션 사용
        with:
          # 커밋 메시지 (원하는 대로 수정 가능)
          commit_message: "Chore: Automatically update word cloud image [skip ci]"
          # 커밋할 파일 지정 (output 폴더의 png 파일)
          file_pattern: "output/wordcloud.png"
          # 변경 사항이 있을 때만 커밋하도록 설정 (기본값)
          skip_dirty_check: false
          # 이미 checkout 했으므로 fetch 건너뛰기
          skip_fetch: true
          # '[skip ci]' 메시지를 커밋에 포함하여 이 커밋으로 인한 워크플로우 재실행 방지 (옵션)
